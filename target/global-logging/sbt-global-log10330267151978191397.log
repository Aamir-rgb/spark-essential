[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 11.0.16)
[debug] Load.defaultLoad until apply took 526.5765ms
[debug]           Load.loadUnit: plugins took 135.4682ms
[debug]           Load.loadUnit: defsScala took 0.3349ms
[debug] [Loading] Scanning directory E:\spark\spark-essential\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\spark\spark-essential\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.1813 ms
[debug]               Load.resolveProject(spark-essential-build) took 65.5462ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-essential-build, base: E:\spark\spark-essential\project, plugins: List(<none>))) took 119.9991ms
[debug] [Loading] Done in E:\spark\spark-essential\project, returning: (spark-essential-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 143.2152ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.303ms
[debug]         Load.loadUnit(file:/E:/spark/spark-essential/project/, ...) took 285.6063ms
[debug]       Load.apply: load took 528.9647ms
[debug]       Load.apply: resolveProjects took 8.178ms
[debug]       Load.apply: finalTransforms took 89.1971ms
[debug]       Load.apply: config.delegates took 20.3846ms
[debug]       Load.apply: Def.make(settings)... took 680.4203ms
[debug]       Load.apply: structureIndex took 126.8255ms
[debug]       Load.apply: mkStreams took 1.9707ms
[info] loading project definition from E:\spark\spark-essential\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2839.0369ms
[debug]     Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory E:\spark\spark-essential
[debug]       Load.loadUnit: mkEval took 9.947ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\spark\spark-essential, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.042 ms
[info] loading settings for project spark-essential from build.sbt ...
[debug]         Load.resolveProject(spark-essential) took 4.7904ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-essential, base: E:\spark\spark-essential, plugins: List(<none>))) took 8.713ms
[debug] [Loading] Done in E:\spark\spark-essential, returning: (spark-essential)
[debug]     Load.loadUnit: loadedProjectsRaw took 4344.078ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.3043ms
[debug]   Load.loadUnit(file:/E:/spark/spark-essential/, ...) took 7199.4568ms
[debug] Load.apply: load took 7236.4356ms
[debug] Load.apply: resolveProjects took 0.1372ms
[debug] Load.apply: finalTransforms took 12.1867ms
[debug] Load.apply: config.delegates took 0.5943ms
[debug] Load.apply: Def.make(settings)... took 139.8119ms
[debug] Load.apply: structureIndex took 28.4721ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to spark-essential (in build file:/E:/spark/spark-essential/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-88eb4204c415e69e50eb
[debug] Writing bsp connection file
[info] started sbt server
